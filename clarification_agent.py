# Fichier: clarification_agent.py

import time
from typing import Dict
from retry import retry
from pydantic import ValidationError

# NOUVEAU : Import de ClarificationOutput depuis le fichier central state.py
from state import GraphState, ClarificationOutput
from llm import TogetherModelWrapper

llm = TogetherModelWrapper(model_name="mistralai/Mixtral-8x7B-Instruct-v0.1")

# L'exception personnalis√©e reste ici car elle est sp√©cifique √† la logique de cet agent
class InvalidDescriptionError(Exception):
    """Lev√©e lorsque la description g√©n√©r√©e n'est pas valide."""
    pass

@retry(InvalidDescriptionError, tries=3, delay=2)
def generate_and_validate_description(question: str) -> str:
    """
    Appelle le LLM et valide la sortie en utilisant le sch√©ma Pydantic.
    Relance automatiquement en cas d'InvalidDescriptionError.
    """
    print("   - Tentative d'appel au LLM...")
    
    prompt = f"""
    [INST]Tu es un analyste m√©tier expert. Transforme la demande suivante en une description textuelle claire du processus m√©tier.
    Ne liste pas les √©tapes, mais d√©cris l'objectif global en une ou deux phrases.

    Demande de l'utilisateur : "{question}"
    Description claire du processus :[/INST]
    """
    
    raw_output = llm(prompt)
    description_str = str(raw_output)
    
    try:
        # On utilise le sch√©ma import√© pour valider la description
        validated_output = ClarificationOutput(description=description_str)
        validated_output.validate_content()
        print("   - ‚úÖ Description valid√©e par Pydantic.")
        return validated_output.description
    except (ValidationError, ValueError) as e:
        # Si la validation √©choue, on l√®ve notre erreur personnalis√©e pour d√©clencher le @retry
        print(f"   - ‚ö†Ô∏è Validation √©chou√©e : {e}. D√©clenchement d'une nouvelle tentative.")
        raise InvalidDescriptionError(e)

def clarification_agent(state: GraphState) -> Dict:
    """
    Agent 1: Agent de Clarification.
    Utilise la biblioth√®que 'retry' pour la robustesse.
    """
    print("\n--- AGENT 1: Clarification et Description (avec @retry) ---")
    question = state["input_question"]
    
    try:
        final_description = generate_and_validate_description(question)
        print("   - ‚úÖ Description finale obtenue avec succ√®s.")
        return {
            "general_response": final_description,
            "next_action": "generate_sop"
        }
    except InvalidDescriptionError as e:
        print(f"   - ‚ùå √âchec final de la clarification apr√®s plusieurs tentatives. Erreur : {e}")
        return {
            "general_response": "Erreur : Impossible de g√©n√©rer une description claire.",
            "next_action": "end_with_error"
        }


# ==============================================================================
#  BLOC DE TEST UNITAIRE
# ==============================================================================
if __name__ == '__main__':
    print("="*60)
    print("üöÄ TEST UNITAIRE: clarification_agent (avec contr√¥le de type)")
    print("="*60)
    
    test_state = {
        "input_question": "Comment faire pour g√©rer un retour produit d'un client ?",
        "conversation_history": []
    }
    
    result_state = clarification_agent(test_state)
    
    print("\n--- R√âSULTAT DU TEST ---")
    print(result_state)
    
    