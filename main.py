# main.py

import os
from dotenv import load_dotenv
from langgraph.graph import StateGraph, END

# --- 1. Imports de nos composants ---

# Importer la d√©finition de l'√©tat partag√©
from state import GraphState

# Importer tous nos agents.
# Pour que cela fonctionne, assurez-vous d'avoir un fichier `agents/__init__.py`
# qui contient les imports de chaque agent.
from clarification_agent import clarification_agent
from sop_structurer import sop_structure_agent
from intelligent_validator_agent import intelligent_validator_agent
from bpmn_engineer_agent import bpmn_engineer_agent

# Charger les variables d'environnement (ex: TOGETHER_API_KEY) depuis le fichier .env
load_dotenv()

# --- 2. Construction du Graphe d'Agents ---

# Cr√©ation d'une instance de StateGraph qui utilisera notre GraphState
workflow = StateGraph(GraphState)

# Ajout des n≈ìuds au graphe. Chaque n≈ìud est un de nos agents.
# Le premier argument est un nom unique pour le n≈ìud, le second est la fonction de l'agent.
workflow.add_node("clarifier", clarification_agent)
workflow.add_node("structurer", sop_structure_agent)
workflow.add_node("validator", intelligent_validator_agent)
workflow.add_node("bpmn_engineer", bpmn_engineer_agent)



# --- 3. D√©finition du Flux de Travail et du Routage ---

# Le point d'entr√©e de notre graphe est l'agent de clarification.
workflow.set_entry_point("clarifier")

# Connexions entre les n≈ìuds
# De `clarifier` √† `structurer` : ce lien est toujours le m√™me.
workflow.add_edge("clarifier", "structurer")

# Apr√®s l'agent `structurer`, le flux est simple : on passe toujours au `validator`.
# Note : C'est le `validator` qui d√©cidera s'il faut revenir au `structurer` ou continuer.
workflow.add_edge("structurer", "validator")

# LE ROUTAGE CONDITIONNEL CL√â
# Cette fonction est appel√©e APR√àS l'ex√©cution du n≈ìud "validator".
def decide_after_validation(state: GraphState) -> str:
    """
    Lit l'√©tat apr√®s la validation et d√©cide de la prochaine √©tape.
    """
    next_action = state.get("next_action")
    if next_action == "generate_bpmn":
        # La validation a r√©ussi, on passe √† l'ing√©nieur BPMN
        return "bpmn_engineer"
    elif next_action == "correct_sop":
        # La validation a √©chou√©, on retourne au structureur pour correction
        return "structurer"
    else:
        # Cas d'erreur ou autre, on termine le graphe
        return END

# On applique cette logique de d√©cision √† la sortie du n≈ìud "validator".
workflow.add_conditional_edges(
    "validator",
    decide_after_validation,
    {
        "bpmn_engineer": "bpmn_engineer",
        "structurer": "structurer",
        END: END
    }
)

# Apr√®s l'ing√©nieur BPMN, le processus est termin√©.
workflow.add_edge("bpmn_engineer",END )


# --- 4. Compilation et Ex√©cution ---

# On compile le graphe en un objet ex√©cutable.
app = workflow.compile()


# Bloc d'ex√©cution principal
if __name__ == "__main__":
    
    # La demande utilisateur que vous voulez traiter
    # prompt_utilisateur = "Explique-moi comment faire pour embarquer un nouvel employ√©."
    # prompt_utilisateur = "Comment pr√©parer une tasse de th√© parfaite ?"
    prompt_utilisateur = "Je veux cr√©er une proc√©dure pour g√©rer un retour de produit par un client."
    
    print(f"üöÄ Lancement du processus pour la demande : \"{prompt_utilisateur}\"")
    print("-" * 30)

    # L'√©tat initial doit correspondre √† notre GraphState
    initial_state = {
        "input_question": prompt_utilisateur,
        "conversation_history": []
    }
    
    # Invocation du graphe avec l'√©tat initial.
    # Le `stream()` permettrait de voir les √©tapes en temps r√©el, mais `invoke()` est plus simple.
    final_state = app.invoke(initial_state)

    print("-" * 30)
    print("üèÅ Processus termin√©.")

    # Affichage du r√©sultat final
    bpmn_output = final_state.get('bpmn_xml')
    if bpmn_output:
        print("\n\n--- R√âSULTAT BPMN 2.0 (XML) ---")
        print(bpmn_output)
        
        # Sauvegarde du r√©sultat dans un fichier
        file_name = "processus_genere.bpmn"
        with open(file_name, "w", encoding="utf-8") as f:
            f.write(bpmn_output)
        print(f"\n‚úÖ Fichier BPMN sauvegard√© : {file_name}")
        print(f"‚û°Ô∏è  Vous pouvez l'ouvrir sur un outil comme https://demo.bpmn.io/ pour le visualiser.")
    else:
        print("\n\n‚ùå La g√©n√©ration du BPMN a √©chou√© ou a √©t√© interrompue.")
        if final_state.get("general_response"):
            print(f"Message final : {final_state['general_response']}")
        elif final_state.get("validation_report"):
             print(f"Raison de l'arr√™t : {final_state['validation_report'].get('reason')}")