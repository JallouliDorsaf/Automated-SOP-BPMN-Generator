# La mission de cet agent est de prendre une description textuelle et de la transformer
# en un plan d'action structur√© et formel (un graphe de processus au format JSON).

import re
import json
import time
from typing import Dict

# Imports pour le retry et la validation de donn√©es
from retry import retry
from pydantic import ValidationError

# Imports depuis vos propres modules.
# NOUVEAU : On importe maintenant ProcessGraph au lieu de StructuredSop.
from state import GraphState, ProcessGraph
from llm import TogetherModelWrapper
from dotenv import load_dotenv 
load_dotenv()
# Initialisation du LLM √† l'ext√©rieur de la fonction pour une meilleure efficacit√©
llm = TogetherModelWrapper(model_name="mistralai/Mixtral-8x7B-Instruct-v0.1")

# L'exception personnalis√©e pour la logique de retry reste la m√™me.
class InvalidProcessGraphError(Exception):
    """Lev√©e lorsque la sortie du LLM n'est pas un graphe de processus JSON valide."""
    pass

def extract_json_from_response(text: str) -> str:
    """Helper pour extraire le JSON d'une r√©ponse de LLM."""
    match = re.search(r'\{.*\}', text, re.DOTALL)
    if match:
        return match.group(0)
    return None

# La logique principale est maintenant dans une fonction d√©cor√©e.
# NOUVEAU : Le d√©corateur √©coute notre nouvelle exception.
@retry((InvalidProcessGraphError, RuntimeError), tries=3, delay=2, backoff=2)
def generate_and_validate_process_graph(prompt: str) -> Dict:
    """
    Appelle le LLM avec un prompt donn√© et valide la sortie avec le sch√©ma Pydantic ProcessGraph.
    Relance automatiquement en cas d'erreur de format (InvalidProcessGraphError) ou d'API (RuntimeError).
    """
    print("   - üåÄ Tentative d'appel au LLM pour la structuration en graphe...")
    
    # 1. Appel au LLM
    raw_response = llm(prompt)
    
    # 2. Extraction du JSON
    json_string = extract_json_from_response(raw_response)
    if not json_string:
        raise InvalidProcessGraphError("Aucun bloc JSON trouv√© dans la r√©ponse du LLM.")
        
    # 3. Validation avec le sch√©ma Pydantic ProcessGraph
    try:
        # NOUVEAU : On valide contre le sch√©ma ProcessGraph.
        graph_model = ProcessGraph.model_validate_json(json_string)
        print("   - ‚úÖ Structure de graphe valid√©e par Pydantic.")
        # On retourne le dictionnaire correspondant au graphe valid√©.
        return graph_model.model_dump()
    except ValidationError as e:
        # Si Pydantic √©choue, on l√®ve notre erreur personnalis√©e pour d√©clencher le @retry.
        print(f"   - ‚ö†Ô∏è Validation Pydantic √©chou√©e : {e}. D√©clenchement d'une nouvelle tentative.")
        raise InvalidProcessGraphError(e)

def sop_structure_agent(state: GraphState) -> Dict:
    """
    Agent 2: Structure la description textuelle en un ProcessGraph au format JSON.
    """
    print("\n--- AGENT 2: Structuration du Graphe de Processus (avec @retry) ---")
    
    text_to_structure = state.get("general_response")
    feedback = state.get("correction_feedback")

    if not text_to_structure:
        print("   - ‚ùå ERREUR: Aucune description √† structurer.")
        return {"structured_sop": None, "next_action": "end_with_error"}

    # --- √âtape 1 : Choisir le bon prompt en fonction du contexte ---
    prompt = ""
    if feedback:
        # La logique de correction de logique reste conceptuellement la m√™me,
        # mais le prompt doit √™tre adapt√© au nouveau format de graphe.
        print(f"   - üîÑ Mode: Correction de Logique (Feedback: '{feedback}')")
        failed_graph = state.get("structured_sop")
        failed_graph_json = json.dumps(failed_graph, indent=2, ensure_ascii=False)
        prompt = f"""
        [INST]Corrige ce graphe de processus qui a √©t√© jug√© illogique.
        Raison du rejet: "{feedback}".
        Graphe incorrect: {failed_graph_json}
        Demande originale: "{text_to_structure}"
        G√©n√®re une NOUVELLE version du graphe JSON compl√®te (titre, nodes, flows). R√©ponds UNIQUEMENT avec le JSON.[/INST]
        """
    else:
        # NOUVEAU : Le prompt initial est maintenant beaucoup plus puissant et demande un graphe.
        print("   - üöÄ Mode: Cr√©ation Initiale du Graphe")
        prompt = f"""
        [INST]Tu es un architecte de processus expert. Ta mission est d'analyser une description textuelle et de la mod√©liser sous forme de graphe JSON, en identifiant les t√¢ches, les points de d√©cision (passerelles), et les flux qui les connectent.

        Ta sortie doit √™tre UNIQUEMENT un objet JSON respectant le format suivant :
        - "titre": string
        - "nodes": une liste d'objets, o√π chaque objet a "id" (string unique), "type" ("task", "gateway", "startEvent", "endEvent"), et "label" (string).
        - "flows": une liste d'objets, o√π chaque objet a "source_id" (string), "target_id" (string), et optionnellement une "condition" (string).

        **Exemple :**
        Texte : "Le processus commence, on valide la demande. Si elle est ok, on la traite, sinon on la rejette. Le processus se termine."
        Sortie JSON attendue :
        ```json
        {{
          "titre": "Validation de Demande",
          "nodes": [
            {{ "id": "start", "type": "startEvent", "label": "D√©but" }},
            {{ "id": "task_validate", "type": "task", "label": "Valider la demande" }},
            {{ "id": "gateway_decision", "type": "gateway", "label": "Demande OK ?" }},
            {{ "id": "task_process", "type": "task", "label": "Traiter la demande" }},
            {{ "id": "task_reject", "type": "task", "label": "Rejeter la demande" }},
            {{ "id": "end", "type": "endEvent", "label": "Fin" }}
          ],
          "flows": [
            {{ "source_id": "start", "target_id": "task_validate" }},
            {{ "source_id": "task_validate", "target_id": "gateway_decision" }},
            {{ "source_id": "gateway_decision", "target_id": "task_process", "condition": "Oui" }},
            {{ "source_id": "gateway_decision", "target_id": "task_reject", "condition": "Non" }},
            {{ "source_id": "task_process", "target_id": "end" }},
            {{ "source_id": "task_reject", "target_id": "end" }}
          ]
        }}
        ```
        Texte √† analyser :
        ---
        {text_to_structure}
        ---
        R√©ponse JSON :[/INST]
        """

    # --- √âtape 2 : Appeler la fonction d√©cor√©e et g√©rer le r√©sultat final ---
    try:
        # La logique de boucle est g√©r√©e par le d√©corateur @retry.
        structured_graph = generate_and_validate_process_graph(prompt)
        
        print(f"   - ‚úÖ Graphe de processus finalis√©. Titre: '{structured_graph.get('titre')}'")
        return {
            "structured_sop": structured_graph, # On le stocke toujours dans 'structured_sop'
            "correction_feedback": None,
            "next_action": "validate_sop"
        }
    except InvalidProcessGraphError as e:
        # Si, apr√®s 3 tentatives, la fonction √©choue toujours.
        print(f"   - ‚ùå √âchec final de la structuration apr√®s plusieurs tentatives. Erreur : {e}")
        return {
            "structured_sop": None,
            "next_action": "end_with_error"
        }

# --- BLOC DE TEST UNITAIRE ---
# Le bloc de test doit √™tre mis √† jour pour refl√©ter la nouvelle structure de sortie.
if __name__ == '__main__':
    print("--- TEST: sop_structure_agent (Mode Graphe) ---")

    test_state_initial = {
        "general_response": "Le processus de gestion des retours de produits clients commence par la r√©ception de la demande de retour de la part du client, qui peut √™tre effectu√©e via diff√©rents canaux tels qu'un appel t√©l√©phonique, un e-mail ou un formulaire de contact en ligne. D√®s r√©ception de la demande, un membre de l'√©quipe du service client v√©rifie si le produit est √©ligible au retour, en fonction des conditions de retour de l'entreprise.   Si le produit est √©ligible au retour, le client est inform√© des prochaines √©tapes et lui est demand√© d'exp√©dier le produit √† l'adresse indiqu√©e par l'entreprise. Une fois le produit re√ßu et inspect√© par l'√©quipe de contr√¥le qualit√©, la d√©cision de remboursement ou de r√©paration est prise.   Si le produit est en bon √©tat et peut √™tre revendu, l'entreprise proc√®de au remboursement du client en cr√©ditant son compte ou en lui √©mettant un ch√®que. Dans le cas o√π le produit est endommag√© ou ne peut pas √™tre revendu, l'entreprise propose une r√©paration ou un √©change au client, en fonction de la politique de retour de l'entreprise.  Si le produit n'est pas √©ligible au retour, le client est inform√© de la raison du refus et des options qui s'offrent √† lui, telles que la r√©paration ou le remplacement du produit. Toutes les √©tapes du processus de gestion des retours de produits clients sont soigneusement document√©es et suivies pour s'assurer que les politiques de retour sont correctement mises en ≈ìuvre et que les clients sont satisfaits du processus de retour.",
        "correction_feedback": None
    }
    result_initial = sop_structure_agent(test_state_initial)
    
    print("\n--- R√©sultat du Test ---")
    graph = result_initial.get("structured_sop")
    if graph:
        print(json.dumps(graph, indent=2, ensure_ascii=False))
        assert "titre" in graph and "nodes" in graph and "flows" in graph, "La structure de graphe (titre, nodes, flows) doit √™tre pr√©sente."
        # On v√©rifie qu'une passerelle a bien √©t√© cr√©√©e
        assert any(node['type'] == 'gateway' for node in graph['nodes']), "Une passerelle (gateway) devrait √™tre d√©tect√©e."
    else:
        print("La structuration en graphe a √©chou√©.")

    print("\n\n‚úÖ Tests termin√©s.")